version: '3.8'

services:
  # PostgreSQL with pgvector for Healthcare Semantic Database
  healthcare-postgres:
    image: pgvector/pgvector:pg15
    container_name: healthcare-postgres
    environment:
      POSTGRES_DB: healthcare_semantic_db
      POSTGRES_USER: healthcare_admin
      POSTGRES_PASSWORD: healthcare_secure_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    command: |
      postgres 
      -c shared_preload_libraries=vector 
      -c max_connections=300 
      -c shared_buffers=512MB 
      -c effective_cache_size=2GB
      -c work_mem=16MB
    networks:
      - healthcare-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U healthcare_admin -d healthcare_semantic_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Kafka for Big Data Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: healthcare-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
    networks:
      - healthcare-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: healthcare-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 6
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    networks:
      - healthcare-network

  # Redis for High-Performance Caching
  healthcare-redis:
    image: redis:7.2-alpine
    container_name: healthcare-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: |
      redis-server 
      --appendonly yes 
      --maxmemory 1gb 
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    networks:
      - healthcare-network

  # Elasticsearch for Healthcare Analytics
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: healthcare-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - healthcare-network

  # Apache Spark for Big Data Processing
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: healthcare-spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_MASTER_OPTS="-Dspark.deploy.defaultCores=4"
    ports:
      - "8081:8080"
      - "7077:7077"
    volumes:
      - spark_data:/opt/bitnami/spark/data
    networks:
      - healthcare-network

  spark-worker:
    image: bitnami/spark:3.5.0
    container_name: healthcare-spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=4g
      - SPARK_WORKER_CORES=4
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    volumes:
      - spark_data:/opt/bitnami/spark/data
    networks:
      - healthcare-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: healthcare-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - healthcare-network

  # Grafana for Healthcare Dashboards
  grafana:
    image: grafana/grafana:10.2.0
    container_name: healthcare-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: healthcare_admin_2024
      GF_USERS_ALLOW_SIGN_UP: false
      GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - healthcare-network

  # Jaeger for Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:1.51
    container_name: healthcare-jaeger
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
    environment:
      COLLECTOR_OTLP_ENABLED: true
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
    networks:
      - healthcare-network

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.89.0
    container_name: healthcare-otel-collector
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
    volumes:
      - ./monitoring/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    depends_on:
      - jaeger
      - prometheus
    networks:
      - healthcare-network

  # Keycloak for Healthcare Identity Management
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: healthcare-keycloak
    environment:
      KEYCLOAK_ADMIN: healthcare_admin
      KEYCLOAK_ADMIN_PASSWORD: healthcare_secure_2024
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://healthcare-postgres:5432/healthcare_semantic_db
      KC_DB_USERNAME: healthcare_admin
      KC_DB_PASSWORD: healthcare_secure_2024
      KC_HOSTNAME: localhost
      KC_HTTP_ENABLED: true
    ports:
      - "8080:8080"
    depends_on:
      - healthcare-postgres
    command: start-dev
    networks:
      - healthcare-network

  # MinIO for Healthcare Document Storage (S3 Compatible)
  minio:
    image: minio/minio:latest
    container_name: healthcare-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: healthcare_admin
      MINIO_ROOT_PASSWORD: healthcare_secure_2024
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - healthcare-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  spark_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  minio_data:
    driver: local

networks:
  healthcare-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16