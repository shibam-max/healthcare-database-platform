# Healthcare Semantic Database Platform - Patient Data Service
# Production-ready configuration demonstrating Oracle Health technical requirements

spring:
  application:
    name: patient-data-service
  
  # Database Configuration with Vector Support
  datasource:
    url: jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:healthcare_semantic_db}?currentSchema=public
    username: ${DB_USERNAME:healthcare_admin}
    password: ${DB_PASSWORD:healthcare_secure_2024}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000

  # JPA Configuration with Performance Optimization
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        jdbc:
          batch_size: 25
        cache:
          use_second_level_cache: true

  # Vector Database Configuration
  ai:
    openai:
      api-key: ${OPENAI_API_KEY:your-openai-api-key}
      embedding:
        model: text-embedding-ada-002
    vectorstore:
      pgvector:
        index-type: HNSW
        distance-type: COSINE_DISTANCE
        dimensions: 1536

  # Kafka Configuration for Big Data
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: patient-data-service
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer

  # MongoDB Configuration
  data:
    mongodb:
      uri: mongodb://admin:admin123@localhost:27017/healthcare_docs?authSource=admin
    
    # Redis Configuration for High-Performance Caching
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:redis123}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 16
          max-idle: 8
          min-idle: 2
  
  # Security Configuration
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI:http://localhost:8080/realms/healthcare}
          jwk-set-uri: ${JWT_JWK_SET_URI:http://localhost:8080/realms/healthcare/protocol/openid-connect/certs}

# AWS Configuration
aws:
  region: ${AWS_REGION:us-east-1}
  s3:
    bucket-name: ${AWS_S3_BUCKET:healthcare-patient-data}

# gRPC Configuration
grpc:
  client:
    provider-service:
      address: 'static://localhost:9090'
      negotiation-type: plaintext

# Healthcare Configuration
healthcare:
  vector-search:
    similarity-threshold: 0.8
    max-results: 50
    cache-ttl: 300
  
  audit:
    enabled: true
    retention-days: 2555
  
  performance:
    enable-query-cache: true
    cache-size: 10000
    async-pool-size: 20

# Flyway Configuration
flyway:
  enabled: true
  baseline-on-migrate: true
  locations: classpath:db/migration

# Monitoring Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,openapi,swagger-ui
  endpoint:
    health:
      show-details: always
      show-components: always
  metrics:
    export:
      prometheus:
        enabled: true
        step: 10s
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5,0.9,0.95,0.99
  tracing:
    sampling:
      probability: 1.0

# OpenTelemetry Configuration
otel:
  exporter:
    otlp:
      endpoint: ${OTEL_EXPORTER_OTLP_ENDPOINT:http://localhost:4317}
  resource:
    attributes:
      service.name: patient-data-service
      service.version: 1.0.0
      deployment.environment: ${ENVIRONMENT:development}

# Server Configuration
server:
  port: 8081
  servlet:
    context-path: /api/v1

# Logging Configuration
logging:
  level:
    com.healthcareplatform: DEBUG
    org.springframework.ai: DEBUG